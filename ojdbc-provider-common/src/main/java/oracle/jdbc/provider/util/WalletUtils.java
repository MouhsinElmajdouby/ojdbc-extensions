package oracle.jdbc.provider.util;

import oracle.jdbc.provider.parameter.ParameterSet;
import oracle.jdbc.spi.OracleResourceProvider;
import oracle.security.pki.OracleSecretStore;
import oracle.security.pki.OracleSecretStoreException;
import oracle.security.pki.OracleWallet;

import java.io.IOException;
import java.util.Base64;
import java.util.Enumeration;
import java.util.Map;

/**
 * Common operations related to Oracle wallet files.
 */
public final class WalletUtils {

  /**
   * The default username secret created by the Oracle `mkstore` command.
   * <p>
   * This constant represents the default name for the username secret that is
   * generated when using Oracle's `mkstore` command to manage secure
   * credentials in Oracle Wallet. By default, Oracle uses the name
   * `oracle.security.client.default_username` for storing the username in
   * the wallet.
   * </p>
   * <p>
   * The `mkstore` command is used to create and manage secure credentials,
   * such as usernames, passwords, and connection strings, in an Oracle Wallet.
   * This provider retrieves the username from the wallet using this default
   * secret name.
   * </p>
   * <p>
   * For more details on the `mkstore` command and how it generates secrets,
   * refer to the Oracle documentation:
   * <a href="https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the-orapki-utility-to-manage-pki-elements.html#GUID-25509071-ABC0-4A0E-A3DB-4D4F61024F25">
   * Oracle mkstore Documentation</a>.
   * </p>
   */
  private static final String SECRET_STORE_DEFAULT_USERNAME =
    "oracle.security.client.default_username";

  /**
   * The default password secret created by the Oracle `mkstore` command.
   * <p>
   * This constant represents the default name for the password secret that is
   * generated when using Oracle's `mkstore` command to manage secure
   * credentials in Oracle Wallet. By default, Oracle uses the name
   * `oracle.security.client.default_password` for storing the password in
   * the wallet.
   * </p>
   * <p>
   * Similar to the username, this provider retrieves the password from the
   * wallet using this default secret name. The `mkstore` command is a
   * standard tool for managing credentials securely in Oracle Wallet.
   * </p>
   * <p>
   * For further details on using `mkstore` to manage credentials in an Oracle
   * Wallet, refer to the official Oracle documentation:
   * <a href="https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the-orapki-utility-to-manage-pki-elements.html#GUID-25509071-ABC0-4A0E-A3DB-4D4F61024F25">
   * Oracle mkstore Documentation</a>.
   * </p>
   */
  private static final String SECRET_STORE_DEFAULT_PASSWORD =
    "oracle.security.client.default_password";

  /**
   * The base identifier for connection strings stored in an Oracle Wallet.
   * <p>
   * This constant is used to locate connection strings in the Oracle Wallet.
   * If the wallet contains multiple connection strings, the identifier will be
   * followed by a number to differentiate each one. For example:
   * `oracle.security.client.connect_string1`,
   * `oracle.security.client.connect_string2`, and so on.
   * </p>
   */
  private static final String SECRET_STORE_CONNECT =
          "oracle.security.client.connect_string";

  /**
   * The base identifier for usernames associated with connection strings
   * in an Oracle Wallet.
   * <p>
   * This constant is used to retrieve username linked to
   * specific connection string stored
   * in the Oracle Wallet. When multiple usernames are stored,
   * the identifier is followed by a number, such as: `oracle.security.client
   * .username1`, `oracle.security.client.username2`, and so on.
   * </p>
   */
  private static final String SECRET_STORE_USERNAME =
          "oracle.security.client.username";

  /**
   * The base identifier for passwords associated with connection strings
   * in an Oracle Wallet.
   * <p>
   * This constant is used to retrieve password linked to
   * specific connection string in the Oracle Wallet.
   * If there are multiple passwords, each one is distinguished by a number.
   * For example: `oracle.security.client.password1`,
   * `oracle.security.client.password2`, and so on.
   * </p>
   */
  private static final String SECRET_STORE_PASSWORD =
          "oracle.security.client.password";

  private WalletUtils() {}

  /**
   * Extracts a username and/or password from an Oracle wallet, if either
   * credential is stored using SEPS.
   * <p>
   * This method first attempts to retrieve credentials from the wallet using
   * the default aliases generated by Oracle's `mkstore` command:
   * <ul>
   *   <li>{@code oracle.security.client.default_username} for the username</li>
   *   <li>{@code oracle.security.client.default_password} for the password</li>
   * </ul>
   * If the default credentials are not present, the method will attempt to
   * extract credentials from a single connection string stored in the wallet.
   * The connection string is identified using indexed aliases such as:
   * <ul>
   *   <li>{@code oracle.security.client.connect_string{idx}}</li>
   *   <li>{@code oracle.security.client.username{idx}}</li>
   *   <li>{@code oracle.security.client.password{idx}}</li>
   * </ul>
   * where `{idx}` represents the index of the connection string.
   * If the wallet contains more than one connection string,
   * an error will be thrown.
   * </p>
   *
   * @param walletBytes The binary encoding of an SSO or PKCS12 wallet. Not
   * null.
   *
   * @param walletPassword The password for the wallet, or {@code null} for
   * SSO wallets.
   *
   * @return Credentials extracted from the wallet, if any. The return value is
   * not null, but it may contain a null username or password.
   *
   * @throws IllegalStateException If an I/O error occurs while opening the
   * wallet.
   *
   */
  public static Credentials getCredentials(
    byte[] walletBytes, char[] walletPassword) {

    OracleWallet wallet = new OracleWallet();
    try {
      wallet.setWalletArray(walletBytes, walletPassword);
    }
    catch (IOException ioException) {
      throw new IllegalStateException("Failed to open wallet", ioException);
    }

    try {
      OracleSecretStore secretStore = wallet.getSecretStore();
      String username = null;
      char[] password = null;

      // Check for default credentials
      if (secretStore.containsAlias(SECRET_STORE_DEFAULT_USERNAME) &&
              secretStore.containsAlias(SECRET_STORE_DEFAULT_PASSWORD)) {
        username =
          new String(secretStore.getSecret(SECRET_STORE_DEFAULT_USERNAME));
        password =
          secretStore.getSecret(SECRET_STORE_DEFAULT_PASSWORD);
        return new Credentials(username, password);
      }

      @SuppressWarnings("unchecked")
      Enumeration<String> aliases =
        (Enumeration<String>) secretStore.internalAliases();
      int connectionCount = 0;

      while (aliases.hasMoreElements()) {
        String alias = aliases.nextElement();
        if (alias.startsWith(SECRET_STORE_CONNECT)) {
          connectionCount++;
          if (connectionCount > 1) {
            throw new
              IllegalStateException("Multiple connection strings found in wallet. Unable to determine which to use.");
          }
          String idx = alias.substring(SECRET_STORE_CONNECT.length());
          username = new String(secretStore.getSecret(SECRET_STORE_USERNAME + idx));
          password = secretStore.getSecret(SECRET_STORE_PASSWORD + idx);
        }
      }

      return new Credentials(username, password);
    }
    catch (OracleSecretStoreException | IOException exception) {
      throw new IllegalStateException(
        "Failed to extract credentials from wallet", exception);
    }
  }

  /**
   * A username and password.
   */
  public static final class Credentials {
    final String username;
    final char[] password;

    Credentials(String username, char[] password) {
      this.username = username;
      this.password = password;
    }

    /**
     * Returns a username, or null if there is none.
     * @return The username, or null.
     */
    public String username() {
      return username;
    }

    /**
     * Returns a password, or null if there is none. The char[] returned by this
     * method is retained by this Credential object; Any changes to the char[]
     * will affect the password that is retained by this object.
     *
     * @return The password, or null.
     */
    public char[] password() {
      return password;
    }
  }
}
